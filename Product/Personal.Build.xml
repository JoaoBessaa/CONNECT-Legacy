<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="Personal Build" default="Build" basedir="..\Build">

  <property name="CCNetBuildCondition" value="ForceBuild " />
  <property name="CCNetIntegrationStatus" value="Success" />
  <property name="CCNetLastIntegrationStatus" value="Success" />
  <property name="CCNetBuildDate" value="2005-01-01" />
  <property name="CCNetBuildTime" value="00:00:01" />
  <property name="CCNetArtifactDirectory" value="C:\Temp\CCNetArtifactDirectory" />
  <property name="CCNetWorkingDirectory" value="C:\Temp\CCNetWorkingDirectory" />
  <property name="CCNetLabel" value="Personal.1" />
  <property name="CCNetLogFilePath" value="" />

  <property name="Workspace.Silent" value="False" />

  <strings id="Personal.UpdateSource.Before.Target.List" />
  <strings id="Personal.UpdateSource.After.Target.List" />

  <include buildfile="Properties.Build.xml" />
  <property name="CCNetProject" value="${ProjectName}" />
  <property name="Compile.ConfigName" value="Debug" />
  <property name="CCNetListenerFile" value="C:\Temp\antlistener.txt" />

  <include buildfile="Common.Build.xml" />
  <include buildfile="Custom.Build.xml" />
  
  <description>Begin Package Includes</description>
  <loadpackages>
    <package name="PersonalTracking" />
    <package name="Publish" />
    <package name="Subversion" type="SourceControl" />
    <package name="SourceModificationReport" />
    <package name="Simian" />
    <package name="Ant" />
    <package name="Selenium" />
    <package name="FitNesse" />
    <package name="JUnit" type="UnitTest" />
    <package name="IntegrationTest" />
    <package name="Corbertura" type="Coverage" />
    <package name="Workspace" />
    <package name="GlassFish" />
    <package name="SoapUI" />
	<package name="Eclipse" />
  </loadpackages>
  <description>End Package Includes</description>
  
  <call target="Common.SetUp" />
    
  <target name="CreateCommandPrompt">
    <setenv>
      <environment refid="${Common.EnvironmentVariables.RefId}" />
    </setenv>
    <call target="UpdateWorkspace" />
    <asyncexec createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" program="cmd" workingdir="${Common.Directory.Product.Path}" commandline="/K title ${ProjectName} command prompt" />
  </target>

  <target name="OpenNetBeans">
    <setenv>
      <environment refid="${Common.EnvironmentVariables.RefId}" />
    </setenv>

    <call target="UpdateWorkspace"/>

    <asyncexec createnowindow="false" redirectoutput="false" useshellexecute="false" waitforexit="false" program="${NetBeans.Install.Path}\bin\netbeans.exe">
      <arg value="-Dcom.sun.aas.instanceName=server"/>
    </asyncexec>
  </target>

  <target name="OpenSoapUI">
    <setenv>
      <environment refid="${Common.EnvironmentVariables.RefId}" />
    </setenv>

    <asyncexec createnowindow="false" redirectoutput="false" useshellexecute="true" waitforexit="false" program="${SoapUI.Install.Directory.Path}\bin\soapui-pro.bat"/>
  </target>

  <target name="UpdateWorkspace">
    <call target="Workspace.CheckForRequieredSoftware" />
    <call target="Workspace.ConfigureEnvironment" />
  </target>
      
  <target name="Build">
    <call target="UpdateWorkspace" />
    <call target="Compile" />
    <call target="DatabaseRebuild" />
    <call target="Test" />
    <call target="Package" />
  </target>
  
  <target name="Commit">
    <ifthenelse test="${target::exists('Personal.Commit')}">
      <then>
        <call target="Build" />
        <call target="Personal.Commit" />
      </then>
      <else>
        <fail message="Could not find target Personal.Commit!" />
      </else>
    </ifthenelse>
  </target>
  
  <target name="Rebuild">
    <call target="UpdateWorkspace" />
    <call target="Recompile" />
    <call target="DatabaseRebuild" />
    <call target="Test" />
    <call target="Package" />
  </target>
  
  <target name="UpdateSource">
    <loopthrough property="Personal.UpdateSource.Before.Target">
      <items>
        <strings refid="Personal.UpdateSource.Before.Target.List" />
      </items>
      <do>
        <call target="${Personal.UpdateSource.Before.Target}" />
      </do>
    </loopthrough>
    <property name="SourceControl.Update.FileTimeStamp" value="Current" />
    <property name="SourceControl.Update.ReplaceWritableFiles" value="False" />
    <property name="SourceControl.Update.MakeWritable" value="False" />
    <property name="SourceControl.Update.Interactive" value="True" />
    <call target="SourceControl.GetOf.CodeLineDirectory" />
    <loopthrough property="Personal.UpdateSource.After.Target">
      <items>
        <strings refid="Personal.UpdateSource.After.Target.List" />
      </items>
      <do>
        <call target="${Personal.UpdateSource.After.Target}" />
      </do>
    </loopthrough>
  </target>
  
  <target name="Compile">
    <ifthenelse test="${target::exists('Personal.Compile')}">
      <then>
        <call target="Personal.Compile" />
      </then>
      <else>
        <fail message="Could not find target Personal.Compile!" />
      </else>
    </ifthenelse>
  </target>
    
  <target name="Recompile">
    <ifthenelse test="${target::exists('Personal.Recompile')}">
      <then>
        <call target="Personal.Recompile" />
      </then>
      <else>
        <fail message="Could not find target Personal.Recompile!" />
      </else>
    </ifthenelse>
  </target>
  
  <target name="Test">
    <call target="UnitTest" />
    <call target="IntegrationTest" />
  </target>
  
  <target name="UnitTest">
    <if test="${target::exists('Personal.UnitTest')}">
      <call target="Personal.UnitTest" />
    </if>
  </target>
  
  <target name="IntegrationTest">
    <if test="${target::exists('Personal.IntegrationTest')}">
      <call target="Personal.IntegrationTest" />
    </if>
  </target>
  
  <target name="Package">
    <if test="${target::exists('Personal.Package')}">
      <call target="Personal.Package" />
    </if>
  </target>
  
  <target name="DatabaseRebuild">
    <if test="${target::exists('Personal.DatabaseRebuild')}">
      <call target="Personal.DatabaseRebuild" />
    </if>
  </target>

  <target name="Redeploy">
    <if test="${target::exists('Personal.Redeploy')}">
      <call target="Personal.Redeploy" />
    </if>
  </target>

  <target name="Redeploy.Configuration">
    <if test="${target::exists('Personal.Redeploy.Configuration')}">
      <call target="Personal.Redeploy.Configuration" />
    </if>
  </target>

</project>