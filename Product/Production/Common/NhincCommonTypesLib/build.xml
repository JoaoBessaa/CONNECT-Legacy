<?xml version="1.0" encoding="UTF-8"?>
<project name="NhincCommonTypesLib" default="build" basedir=".">
  <description>Builds, tests, and runs the project NhincCommonTypesLib.</description>
  <import file="nbproject/build-impl.xml"/>

  <property name="deploy.type" value="shared" />
  <property name="deploy.isDeployable" value="true"/>

  <import file="../../../build.lib.xml" />

  <target name="build">
    <antcall target="jar" />
  </target>

  <target name="clean-build" depends="clean,build" />
  <target name="clean-test" depends="clean,build" />
  <target name="build-test" depends="build" />

  <!-- ### BEGIN OUT OF DATE OVERRIDE ### -->
  <!-- The jar target has been overridden to only run if the source files are newer than the last jar file. 
	 The original jar target was renamed to "internal-jar" so the entire jar process could be bypassed if a build would not be performed.
	 ${dist.jar.dir} and ${dist.jar} variables were not available in this target so explicit values were used. -->
  <target name="jar">
    <outofdate verbose="true" >
      <sourcefiles>
        <fileset dir="../Interfaces/src">
          <include name="**/*" />
        </fileset>
      </sourcefiles>
      <targetfiles>
        <filelist dir="dist">
          <file name="NhincCommonTypesLib.jar" />
        </filelist>
      </targetfiles>
      <sequential>
        <echo message="*** NhincCommonTypesLib out of date - build triggered ***" />
        <antcall target="internal-jar" />
      </sequential>
    </outofdate>
  </target>

  <target depends="init,compile,-pre-jar,-do-jar-with-manifest,-do-jar-without-manifest,-do-jar-with-mainclass,-do-jar-with-libraries,-post-jar" description="Build JAR." name="internal-jar"/>
  <!-- ### END OUT OF DATE OVERRIDE ### -->

  <target name="build-init">
    <property name="build.generated.dir" value="build"/>
    <mkdir dir="${build.generated.dir}/wsimport/client"/>
    <mkdir dir="${build.generated.dir}/wsimport/binaries"/>
    <mkdir dir="../../../lib" />
    <taskdef name="wsimportConnect" classname="gov.hhs.fha.nhinc.tools.ws.ant.WsImportConnect">
      <classpath path="${libs.jaxws21.classpath}"/>
    </taskdef>
    <typedef classname="com.sun.tools.xjc.XJCTask" name="xjc" xmlns:s="http://xml.netbeans.org/schema/JAXBWizConfig">
      <classpath path="${libs.jaxb.classpath}"/>
    </typedef>
  </target>

  <!-- Generate and compile classes from WSDL and schema files -->
  <target name="-pre-compile" depends="build-init">
    <echo message="Generating JAXB Classes from Schemas..." />
    <echo message="---------------------------------------" />
    <xjc destdir="${build.generated.dir}/wsimport/client" >
      <classpath>
        <pathelement location="${src.dir}"/>
        <pathelement path="${libs.jaxb.classpath}"/>
      </classpath>
      <arg value="-xmlschema"/>
      <schema dir="../Interfaces/src/schemas">
        <include name="nhinc/**/*.xsd"/>
        <include name="docs.oasis-open.org/**/*.xsd"/>
        <include name="ebRS/**/*.xsd"/>
        <include name="ihe/**/*.xsd"/>
        <include name="nhin/**/*.xsd"/>
        <include name="oasis/**/*.xsd"/>
        <include name="uddi/uddi_v3.xsd"/>
        <include name="uddi/uddi_v3custody.xsd"/>
        <include name="uddi/uddi_v3policy_instanceParms.xsd"/>
        <include name="uddi/uddi_v3subscriptionListener.xsd"/>
        <include name="uddi/uddi_v3subscription.xsd"/>
        <include name="www.w3.org/**/*.xsd"/>
        <include name="xmlsoap.org/**/*.xsd"/>
        <include name="Endpoint/**/*.xsd"/>
      </schema>
    </xjc>

    <echo message="Generating Code from WSDL..." />
    <echo message="----------------------------" />
    <for param="file">
      <path>
        <fileset dir="../Interfaces/src/wsdl">
          <include name="*.wsdl" />
          <exclude name="NhinUddiSubrV3PortType.wsdl" />
          <exclude name="NhincComponentInternalSubDiscovery201309Orch.wsdl" />
          <exclude name="rw-2.wsdl" />
          <exclude name="uddi_api_v3_binding.wsdl" />
          <exclude name="uddi_api_v3_portType.wsdl" />
          <exclude name="uddi_custody_v3_binding.wsdl" />
          <exclude name="uddi_custody_v3_portType.wsdl" />
          <exclude name="uddi_repl_v3_binding.wsdl" />
          <exclude name="uddi_repl_v3_portType.wsdl" />
          <exclude name="uddi_sub_v3_binding.wsdl" />
          <exclude name="uddi_sub_v3_portType.wsdl" />
          <exclude name="uddi_subr_v3_binding.wsdl" />
          <exclude name="uddi_subr_v3_portType.wsdl" />
          <exclude name="uddi_vs_v3_binding.wsdl" />
          <exclude name="uddi_vs_v3_portType.wsdl" />
          <exclude name="uddi_vscache_v3_binding.wsdl" />
          <exclude name="uddi_vscache_v3_portType.wsdl" />
          <!-- TODO: This one needs to be added - failing on some schema files that are referenced -->
          <!--					<exclude name="uddi_v3_service.wsdl" /> -->
        </fileset>
      </path>
      <sequential>
        <antcall target="processWsdl">
          <param name="wsdl.file.path" value="@{file}" />
        </antcall>
      </sequential>
    </for>

    <call target="copy.util.src"/>
    
    <echo message="Compiling Generated Code..." />
    <echo message="---------------------------" />
    <javac srcdir="${build.generated.dir}/wsimport/client" destdir="${build.generated.dir}/wsimport/binaries"/>
  </target>

  <!-- Copy the classes that resulted from compiling generated code to the classes directory -->
  <target name="-pre-jar">
    <copy todir="${build.classes.dir}">
      <fileset dir="${build.generated.dir}/wsimport/binaries/"/>
    </copy>
  </target>

  <!-- Common wsimport target -->
  <target name="processWsdl">
    <echo message="Performing wsimport for: ${wsdl.file.path}" />
    <basename property="wsdl.file" file="${wsdl.file.path}" />
    <wsimportConnect xendorsed="true" sourcedestdir="${build.generated.dir}/wsimport/client" extension="true"
                  destdir="${build.generated.dir}/wsimport/binaries" wsdl="${wsdl.file.path}" verbose="true"
                  wsdlLocation="${wsdl.file}" xnocompile="true" />
  </target>

  <target name="copy.util.src">
    <copy todir="${build.generated.dir}/wsimport/client">
      <fileset dir="src/main/java">
        <include name="**/*.java"/>
      </fileset>
    </copy>
  </target>
</project>
