<?xml version="1.0" encoding="UTF-8"?>
<!--
script: Ant

kinda of the ringmaster of the show

defines the highlevel target names and order
of operation

layer of abstraction



-->
<project name="build.targets">

  <taskdef resource="net/sf/antcontrib/antlib.xml" />
  <taskdef name="xmltask" classname="com.oopsconsultancy.xmltask.ant.XmlTask"/>
  <typedef resource="AgilexAnt.properties" />
  <script language="javascript">
    <![CDATA[
	    importClass(Packages.com.agilex.ant.TargetListener);
		
		var targetListener = new TargetListener();
		project.setProjectReference(targetListener);
		project.addBuildListener(targetListener);
	]]>
  </script>

  <import file="properties.build.xml" />
  <import file="common.build.xml" />
  <import file="build.macros.xml"/>
  <import file="custom.build.xml"/>

  <import file="ivy/ivy.targets.xml"/>
  <import file="compile/compile.targets.xml"/>
  <import file="package/package.targets.xml"/>
  <import file="junit/junit.targets.xml"/>
  <import file="soapui/soapui.targets.xml"/>
  <import file="corbertura/corbertura.targets.xml"/>
  <import file="../Install/deploy.xml"/>
  <import file="checkstyle/checkstyle.targets.xml"/>
  <import file="licensetool/license.targets.xml"/>

  <property name="calling.anttarget.from.netbeans" value="false"/>
  <!-- The above property is read from netbeans configuration file -->
  <if>
	<equals arg1="${calling.anttarget.from.netbeans}" arg2="true"/>
	<then>
	  <echo message="loadding........"/>
	  <import file="netbeans/netbeans.targets.xml" />
	</then>
  </if>

  
  <target name="deploy">
    <call target="create.deploy.list.xml" if="${deploy.isDeployable}"/>
    <call target="copy.deployable.artifacts" if="${deploy.isDeployable}"/>
    <call target="deploy.to.production" if="${deploy.isDeployable}"/>
  </target>

  <target name="just.deploy" description="Deploy the project, does not call dependent targets...">
    <call target="deploy.to.development" if="${deploy.isDeployable}"/>
  </target>

  <target name="undeploy">
    <call target="create.deploy.list.xml" if="${deploy.isDeployable}"/>
    <call target="copy.deployable.artifacts" if="${deploy.isDeployable}"/>
    <call target="undeploy.from.production" if="${deploy.isDeployable}"/>
  </target>
  
  <target name="create.deploy.list.xml">
    <xmltask dest="${deploy.application.list.file.path}" outputter="simple:3"> 
      <insert path="/" xml="&lt;applications&gt;&lt;wars/&gt;&lt;shared/&gt;&lt;ejbs/&gt;&lt;execs/&gt;&lt;/applications&gt;"/>
    </xmltask> 
  </target>

  <target name="addentry.deploy.list.xml">
    <if>
      <istrue value="${deploy.isDeployable}"/>
    <then>
      <switch value="${deploy.type}">
        <case value="war">
          <var name="deploy.list.entry.xpath" value="/applications/wars"/>
          <var name="deploy.list.entry" value="&lt;war&gt;&lt;name&gt;${project.name}&lt;/name&gt;&lt;/war&gt;"/>
          <runtarget target="insert.entry.to.deploy.app.list"/>
        </case>
        <case value="shared">
          <var name="deploy.list.entry.xpath" value="/applications/shared"/>
          <var name="deploy.list.entry" value="&lt;lib&gt;&lt;name&gt;${project.name}&lt;/name&gt;&lt;/lib&gt;"/>
          <runtarget target="insert.entry.to.deploy.app.list"/>       
        </case>
        <case value="ejb">
          <var name="deploy.list.entry.xpath" value="/applications/ejbs"/>
          <var name="deploy.list.entry" value="&lt;ejb&gt;&lt;name&gt;${project.name}&lt;/name&gt;&lt;/ejb&gt;"/>
          <runtarget target="insert.entry.to.deploy.app.list"/>
        </case>
        <case value="executable">
          <var name="deploy.list.entry.xpath" value="/applications/execs"/>
          <var name="deploy.list.entry" value="&lt;executable&gt;&lt;name&gt;${project.name}&lt;/name&gt;&lt;/executable&gt;"/>
          <runtarget target="insert.entry.to.deploy.app.list"/>
        </case>
        <default>
          <fail message="Deploy type ${deploy.type} is not supported."/>
        </default>
      </switch>
    </then>
    </if>
  </target>
  
  <target name="insert.entry.to.deploy.app.list">
    <xmltask  source="${deploy.application.list.file.path}" dest="${deploy.application.list.file.path}" outputter="simple:3">
      <insert path="${deploy.list.entry.xpath}" xml="${deploy.list.entry}"/>
    </xmltask>
  </target>
  
  <target name="copy.deployable.artifacts">
    <call target="addentry.deploy.list.xml" if="${deploy.isDeployable}"/>
    <call target="copy.artifacts.to.development" if="${deploy.isDeployable}"/>
  </target>

  <target name="clean" description="Clean the project: run ant help for more info...">
    <dependcalls target="clean" />
    <call target="just.clean"/>
  </target>

  <target name="just.clean" description="Clean the project, does not call dependent targets...">
    <call target="ivy.clean"/>
    <call target="compile.clean"/>
    <call target="package.clean"/>
    <call target="junit.clean"/>
    <call target="coverage.clean"/>
    <call target="soapui.clean"/>
  </target>

  <target name="source.compile" description="Compile the project: run ant help for more info...">
    <dependcalls target="source.compile" />
    <call target="just.source.compile"/>
  </target>

  <target name="just.source.compile" description="Compile the project, does not call dependent targets...">
    <call target="ivy.resolve"/>
    <call target="-compile.source"/>
    <call target="coverage.instrument.classes" />
  </target>

  <target name="unittest.run" description="Run the JUnit tests for the project: run ant help for more info...">
    <call target="source.compile" if="${unittest.hasTests}" once="true"/>
    <call target="just.unittest.run" if="${unittest.hasTests}"/>
  </target>

  <target name="just.unittest.run" description="Run the JUnit tests for the project, does not call dependent targets...">
    <if>
      <istrue value="${unittest.hasTests}"/>
      <then>
        <var name="need.to.update.root.coverage.failure.file" value="true"/>
        <run.if.unit.tests.are.out.of.date>
          <do>
            <call target="coverage.prepfortests" />
            <call target="-unittest.run"/>
            
            <call target="-coverage.check.project" />
            <var name="need.to.update.root.coverage.failure.file" value="false"/>
          </do>
        </run.if.unit.tests.are.out.of.date>
        <if>
          <istrue value="${need.to.update.root.coverage.failure.file}"/>
          <then>
            <call target="-coverage.update.failure.file" />
          </then>
        </if>
      </then>
    </if>
  </target>

  <target name="integrationtest.run" description="Run the JUnit Integration tests for the project: run ant help for more info...">
    <call target="source.compile" if="${integrationtest.hasTests}" once="true"/>
    <call target="just.integrationtest.run" if="${integrationtest.hasTests}"/>
  </target>

  <target name="just.integrationtest.run" description="Run the JUnit Integration tests for the project, does not call dependent targets...">
    <call target="-integrationtest.run"/>
  </target>

  <target name="soapui.run" description="Run the SoapUI tests for the project: run ant help for more info...">
    <call target="-soapui.run"/>
  </target>

  <target name="webtest.run" description="Run the Selenium JUnit tests for the project: run ant help for more info...">
    <call target="source.compile" if="${webtest.hasTests}" once="true"/>
    <call target="just.webtest.run" if="${webtest.hasTests}"/>
  </target>

  <target name="just.webtest.run" description="Run the Selenium JUnit tests for the project, does not call dependent targets...">
    <call target="-webtest.run"/>
  </target>

  <target name="package.create" depends="source.compile" description="Create the jar|war|ear for the project: run ant help for more info...">
    <dependcalls target="package.create"/>
    <call target="just.package.create"/>
  </target>

  <target name="just.package.create" description="Create the jar|war|ear for the project, does not call any dependent targets...">
    <call target="just.source.compile" once="true"/>
    <call target="-package.create"/>
    <call target="coverage.instrument.package"/>
  </target>

  <target name="checkstyle">
    <call target="checkstyle.style"/>
  </target>

  <target name="scratch.files">
    <!--    
        <copy file="${project.dir}/build.xml" overwrite="true" verbose="${debug}">
             <fileset dir="${project.dir}">
                 <include name="build_new.xml" />
             </fileset>
        </copy>
        <exec dir="${project.dir}" osfamily="windows" executable="cmd.exe" inputstring="">
          <arg line='/C svn add ${project.dir}/coverage.thresholds.xml'/>
        </exec>
    --> 
      <exec dir="${project.dir}" osfamily="windows" executable="cmd.exe" inputstring="">
        <arg line='/C svn move ${project.dir}/build_new.xml ${project.dir}/build.xml'/>
      </exec>
  </target>

  <target name="help">
    <echo taskname="help">
      run ant -p for the short help
    	
      This project is in a ${build.config} configuration because the property compile.debug is set to ${compile.debug}.
      To control the configuration set the property compile.debug at the command line like so: -Dcompile.debug=[true|false].

      Targets available in this project:

      clean - deletes all transient directories and files of this project and it's dependent projects.
    	
      just.clean - cleans just this project.

      source.compile - if out-of-date compiles all source files and copies all resources into the ${build.dir}; also compile all dependent projects.
    	
      just.source.compile - compiles just this project if out-of-date.

      package.create - if out-of-date creates ${dist.file}; also creates packages for all dependent projects.
    	
      just.package.create - packages just this project if out-of-date.

      unittest.run - calls source.compile then executes all the tests in ${unittest.source.dir}.
      It is ${unittest.hasTests} that this project has unit tests.
      Writes an html report to ${coverage.report.dir}/index.html.
      It is ${coverage.isneeded} that coverage is collected in this configuration.
      Checks that both line and branch coverage rates are meet for all classes.
      The default minimum rates, percents required are ${coverage.threshold.linerate}% line coverage
      and ${coverage.threshold.branchrate}% branch coverage.  Exceptions to the default rates are maintained
      in the file ${coverage.thresholds.file}.
    	
      just.unittest.run - does what unittest.run does minus the compilation.

      integrationtest.run - calls source.compile then executes all tests in ${unittest.source.dir}.
      It is ${integrationtest.hasTests} that this project has integration tests.
      Writes an html report to ${coverage.report.dir}/index.html.
      It is ${coverage.isneeded} that coverage is collected in this configuration.
      Checks that both line and branch coverage rates are meet for all classes.
      The default minimum rates, percents required are ${coverage.threshold.linerate}% line coverage
      and ${coverage.threshold.branchrate}% branch coverage.  Exceptions to the default rates are maintained
      in the file ${coverage.thresholds.file}.
    	
      just.integrationtest.run - does what integrationtest.run does minus the compilation.

      webtest.run - executes all tests in ${unittest.source.dir}.
      It is ${webtest.hasTests} that this project has web tests..
      
      deploy - calls package.create then deploys the project's package ${dist.file} if the property deploy.isDeployable is set to true, it is currently marked ${deploy.isDeployable}.
    	
      just.deploy - deploys the project's package ${dist.file} if the property deploy.isDeployable is set to true, it is currently marked ${deploy.isDeployable}.
    
      undeploy - undeploys the project's package ${dist.file} if the property deploy.isDeployable is set to true, it is currently marked ${deploy.isDeployable}.

    </echo>

    <call target="ivy.help"/>
    <call target="compile.help"/>
    <call target="package.help"/>
    <call target="junit.help"/>
    <call target="coverage.help"/>
    <call target="soapui.help"/>
  </target>	  	
</project>