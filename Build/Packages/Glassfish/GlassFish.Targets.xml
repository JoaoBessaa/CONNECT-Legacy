<?xml version="1.0" encoding="utf-8"?>
<project xmlns="http://nant.sf.net/schemas/nant.xsd" name="GlassFish">

  <stringadd refid="Personal.UpdateSource.Before.Target.List">
    <string value="GlassFish.StopServer"/>
  </stringadd>

  <stringadd refid="Personal.UpdateSource.After.Target.List">
    <string value="GlassFish.RestartServer"/>
  </stringadd>

  <target name="GlassFish.RestartServer">
    <call target="GlassFish.StartServer" if="${GlassFish.Status=='Started'}"/>
  </target>

  <target name="GlassFish.StartServer">
    <call target="GlassFish.GetServerStatus"/>
    <if test="${GlassFish.Status == 'Stopped'}">
      <ant.async
        target="deploy.glassfish.start.server"
        buildfile="${Common.Directory.Product.Path}\build.xml"
        logfile="${Ant.Log.Directory.Path}\start.glassfish.log.xml"
        taskname="GlassFish.StartServer"
      >
        <environment refid="GlassFish.EnvironmentVariables.RefId"/>
        <args/>
      </ant.async>

      <waitforexit>
        <tasknames>
          <string value='GlassFish.StartServer'/>
        </tasknames>
      </waitforexit>
    </if>
  </target>

  <target name="GlassFish.StopServer">
    <call target="GlassFish.GetServerStatus"/>
    <if test="${GlassFish.Status == 'Started'}">
      <ant
        target="deploy.glassfish.stop.server"
        buildfile="${Common.Directory.Product.Path}\build.xml"
        logfile="${Ant.Log.Directory.Path}\stop.glassfish.log.xml"
      >
        <environment refid="GlassFish.EnvironmentVariables.RefId"/>
        <args/>
      </ant>
    </if>
  </target>

  <target name="GlassFish.GetServerStatus">
    <trycatch>
      <try>
        <get
         src="http://localhost:${GlassFish.Port}"
         dest="${environment::get-variable('TEMP')}\GlassFish-status.txt"
        />
        <loadfile file="${environment::get-variable('TEMP')}\GlassFish-status.txt" property="GlassFish.Status" />
        <ifthenelse test="${string::contains(GlassFish.Status, 'error')}">
          <then>
            <property name="GlassFish.Status" value="Stopped"/>
          </then>
          <else>
            <property name="GlassFish.Status" value="Started"/>
          </else>
        </ifthenelse>
      </try>
      <catch>
        <property name="GlassFish.Status" value="Stopped"/>
      </catch>
    </trycatch>
  </target>

  <target name="GlassFish.Redeploy">
    <call target="GlassFish.Recreate.Domain"/>
    <call target="GlassFish.Deploy"/>
  </target>

  <target name="GlassFish.Install.Domain.Certificates">
    <ant
      target="glassfish.install.domain.certificates"
      buildfile="${GlassFish.Deploy.Script.File.Path}"
      logfile="${Ant.Log.Directory.Path}\recreate.glassfish.domain.log.xml"
    >
      <environment refid="GlassFish.EnvironmentVariables.RefId"/>
      <args/>
    </ant>
  </target>

  <target name="GlassFish.Recreate.Domain">
    <property name="GlassFish.Recreate.Domain.Arg1" value=""/>
    <if test="${property::exists('GlassFish.Domain.Templates.File.Path')}">
      <property name="GlassFish.Recreate.Domain.Arg1" value="-Ddeployment.domain.template.file.path=${property::value(GlassFish.Domain.Templates.File.Path)}" overwrite="True"/>
    </if>

    <ant
       target="recreate.glassfish.domain"
       buildfile="${GlassFish.Deploy.Script.File.Path}"
       logfile="${Ant.Log.Directory.Path}\recreate.glassfish.domain.log.xml"
          >
      <environment refid="GlassFish.EnvironmentVariables.RefId"/>
      <args>
        <arg line="${GlassFish.Recreate.Domain.Arg1}"/>
      </args>
    </ant>
  </target>

  <target name="GlassFish.Deploy.Configuration">
    <ant
      target="deploy.nhinc.configuration.to.glassfish"
      buildfile="${GlassFish.Deploy.Script.File.Path}"
      logfile="${Ant.Log.Directory.Path}\deploy.configuration.log.xml"
    >
      <environment refid="GlassFish.EnvironmentVariables.RefId"/>
      <args>
        <arg line="-Ddeployment.environment.configuration.dir.name=${GlassFish.Domain1.NHINC.Configuration.Directory.Name} -Ddeployment.dir=${GlassFish.Deploy.Directory.Path}"/>
      </args>
    </ant>
  </target>

  <target name="GlassFish.Enable.Profiler.Configuration">
    <ant
      target="add.profiler.domain.config"
      buildfile="${GlassFish.Deploy.Script.File.Path}"
      logfile="${Ant.Log.Directory.Path}\deploy.configuration.log.xml"
    >
      <environment refid="GlassFish.EnvironmentVariables.RefId"/>
      <args/>
    </ant>
  </target>

  <target name="GlassFish.Undeploy">
    <ant.async
      target="undeploy"
      buildfile="${GlassFish.Deploy.Script.File.Path}"
      logfile="${Ant.Log.Directory.Path}\undeploy_log.xml"
      taskname="GlassFish.Undeploy"
    >
      <environment refid="GlassFish.EnvironmentVariables.RefId"/>
      <args/>
    </ant.async>

    <waitforexit>
      <tasknames>
        <string value='GlassFish.Undeploy'/>
      </tasknames>
    </waitforexit>
  </target>

  <target name="GlassFish.Deploy">
    <ant.async
      target="deploy"
      buildfile="${GlassFish.Deploy.Script.File.Path}"
      logfile="${Ant.Log.Directory.Path}\deploy_log.xml"
      taskname="GlassFish.Deploy"
    >
      <environment refid="GlassFish.EnvironmentVariables.RefId"/>
      <args/>
    </ant.async>

    <waitforexit>
      <tasknames>
        <string value='GlassFish.Deploy'/>
      </tasknames>
    </waitforexit>
  </target>

  <target name="GlassFish.SetUp">
  </target>

  <target name="GlassFish.TearDown">
  </target>

  <target name="Personal.Redeploy">
    <ask
      answer="GlassFish.Deploy.Source"
      caption="Deploy Source"
      question="Do you want to deploy from your local build or choose a release build from the build server?"
    >
      <options>
        <string value="Release Build"/>
        <string value="Local Build"/>
      </options>
    </ask>

    <switch value="${GlassFish.Deploy.Source}">
      <case value="Release Build" break="True">
        <call target="Personal.GlassFish.GetRelease"/>
      </case>
      <case value="Local Build" break="True">
        <property name="GlassFish.Deploy.Directory.Path" value="${Common.Directory.Product.Path}"/>
        <property name="GlassFish.Deploy.Script.File.Path" value="${GlassFish.Deploy.Directory.Path}\build.xml" />
        <property name="GlassFish.Deploy.Ant.Home" value="${Ant.Home}"/>
        <call target="Ant.CompileSource"/>
      </case>
      <default>
        <fail message="The choice ${GlassFish.Deploy.Source} was unexpected!"/>
      </default>
    </switch>

    <trycatch>
      <try>
        <call target="Ant.SetUp"/>
        <call target="GlassFish.Deploy" />
      </try>
      <catch property="ExceptionMessage">
        <echo message="${ExceptionMessage}"/>
        <property name="Ant.Log.File.Path" value="${Ant.Log.Directory.Path}\deploy_log.xml"/>
        <call target="Ant.ShowReport"/>
        <fail message="Please see the report opened in your browser for more detail.${NewLine}${ExceptionMessage}"/>
      </catch>
      <finally>
        <call target="Ant.TearDown"/>
      </finally>
    </trycatch>
  </target>

  <target name="Personal.GlassFish.GetRelease">
    <ask.published.good.build
          verbose="True"
          resultproperty="Release.Application.Version"
        />

    <echo message="Getting release version ${Release.Application.Version}..."/>

    <property name="Release.Application.Zip.File.Name" value="${ProjectName}-Release-Installer-${Release.Application.Version}.zip"/>
    <property name="Release.Application.Zip.File.Path" value="${Common.Project.TempDirectory}\${Release.Application.Zip.File.Name}"/>

    <get.published.artifact
      verbose="True"
      artifact="${Release.Application.Zip.File.Name}"
      dest="${Release.Application.Zip.File.Path}"
      build="${Release.Application.Version}"
        />
    <delete dir="${GlassFish.Deploy.Directory.Path}" if="${directory::exists(GlassFish.Deploy.Directory.Path)}"/>

    <echo message="Unzipping ${Release.Application.Zip.File.Path} to ${GlassFish.Deploy.Directory.Path}."/>
    <unzip todir="${GlassFish.Deploy.Directory.Path}" zipfile="${Release.Application.Zip.File.Path}"/>
  </target>

  <target name="Personal.Redeploy.Configuration">
    <property name="GlassFish.Deploy.Directory.Path" value="${Common.Directory.Production.Path}\Common\Properties"/>
    <property name="GlassFish.Deploy.Script.File.Path" value="${Common.Directory.Product.Path}\build.xml" />
    <property name="GlassFish.Domain1.NHINC.Configuration.Directory.Name" value="Dev" />
    <property name="GlassFish.Deploy.Ant.Home" value="${Ant.Home}"/>

    <trycatch>
      <try>
        <call target="Ant.SetUp"/>
        <call target="GlassFish.Deploy.Configuration" />
      </try>
      <catch property="ExceptionMessage">
        <echo message="${ExceptionMessage}"/>
        <property name="Ant.Log.File.Path" value="${Ant.Log.Directory.Path}\deploy.configuration.log.xml"/>
        <call target="Ant.ShowReport"/>
        <fail message="Please see the report opened in your browser for more detail.${NewLine}${ExceptionMessage}"/>
      </catch>
      <finally>
        <call target="Ant.TearDown"/>
      </finally>
    </trycatch>
  </target>
</project>
